# /news_aggregator/backends/telegram_bot.py
from __future__ import annotations
import os
import textwrap
from typing import Dict, Any, List

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage

from backends.rss_utils import (
    parse_many_async,
    format_three_lines_plain_ru,
)

BOT_TOKEN_ENV = "TELEGRAM_BOT_TOKEN"

# –ü—Ä–æ—Å—Ç–∞—è in-memory "–ø–∞–º—è—Ç—å" (–±–µ–∑ –ë–î)
USER_PREFS: Dict[int, Dict[str, Any]] = {}

class RSSForm(StatesGroup):
    waiting_for_urls = State()

def _parse_urls_block(s: str) -> List[str]:
    raw = (s or "").replace("\r", "\n").split("\n")
    urls: List[str] = []
    for line in raw:
        line = line.strip()
        if not line:
            continue
        urls.extend([u.strip() for u in line.split(",") if u.strip()])
    return urls

def _get_user_prefs(uid: int) -> Dict[str, Any]:
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3 —Å—Ç–∞—Ç—å–∏ –∏ —Å–≤–æ–¥–∫–∞ –æ–∫–æ–ª–æ 36 —Å–ª–æ–≤
    return USER_PREFS.setdefault(uid, {"latest_n": 3, "keywords": "", "summary_words": 36})

async def on_start(message: Message):
    await message.answer(
        textwrap.dedent(
            """\
            –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞. –ü—Ä–∏—Å—ã–ª–∞—é –°–ñ–ê–¢–´–ï —Å–≤–æ–¥–∫–∏ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º (–Ω–∞ —Ä—É—Å—Å–∫–æ–º).
            –§–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî 3 —Å—Ç—Ä–æ–∫–∏: –∑–∞–≥–æ–ª–æ–≤–æ–∫ / –≤—Ä–µ–º—è / —Å–≤–æ–¥–∫–∞.

            –ö–æ–º–∞–Ω–¥—ã:
            ‚Ä¢ /setn <—á–∏—Å–ª–æ> ‚Äî —Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π –±—Ä–∞—Ç—å —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
            ‚Ä¢ /setk <—Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é> ‚Äî —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            ‚Ä¢ /setsumw <—á–∏—Å–ª–æ> ‚Äî —Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä —Å–≤–æ–¥–∫–∏ –≤ —Å–ª–æ–≤–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 36)
            ‚Ä¢ /rss ‚Äî –∑–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
            ‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥
            """
        )
    )

async def cmd_setn(message: Message):
    try:
        n = int(message.text.split(maxsplit=1)[1])
        if n < 1 or n > 300:
            raise ValueError
    except Exception:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ 1..300, –Ω–∞–ø—Ä–∏–º–µ—Ä: /setn 3")
        return
    _get_user_prefs(message.from_user.id)["latest_n"] = n
    await message.answer(f"‚úÖ –ë—É–¥—É –±—Ä–∞—Ç—å –ø–æ {n} –∑–∞–ø–∏—Å–µ–π —Å –∫–∞–∂–¥–æ–≥–æ RSS.")

async def cmd_setk(message: Message):
    try:
        kw = message.text.split(maxsplit=1)[1].strip()
    except Exception:
        kw = ""
    _get_user_prefs(message.from_user.id)["keywords"] = kw
    await message.answer(f"‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {kw or '–æ—Ç–∫–ª—é—á—ë–Ω'}.")

async def cmd_setsumw(message: Message):
    try:
        w = int(message.text.split(maxsplit=1)[1])
        if w < 15 or w > 80:
            raise ValueError
    except Exception:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ 15..80 —Å–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: /setsumw 36")
        return
    _get_user_prefs(message.from_user.id)["summary_words"] = w
    await message.answer(f"‚úÖ –†–∞–∑–º–µ—Ä —Å–≤–æ–¥–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {w} —Å–ª–æ–≤.")

async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùé –û—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (/rss).")

async def cmd_rss(message: Message, state: FSMContext):
    await state.set_state(RSSForm.waiting_for_urls)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ RSS-—Å—Å—ã–ª–æ–∫ (–∫–∞–∂–¥—É—é –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é). "
        "–ö–æ–º–∞–Ω–¥–∞ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å."
    )

async def handle_urls(message: Message, state: FSMContext):
    urls = _parse_urls_block(message.text or "")
    if not urls:
        await message.answer("–°—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ /cancel.")
        return

    user_id = message.from_user.id
    prefs = _get_user_prefs(user_id)
    latest_n = int(prefs.get("latest_n", 3))
    keywords = str(prefs.get("keywords", ""))
    summary_words = int(prefs.get("summary_words", 36))

    await message.answer(
        f"üîé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(urls)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤‚Ä¶ (–ø–æ {latest_n} –∑–∞–ø–∏—Å–µ–π, —Å–≤–æ–¥–∫–∞ ‚âà {summary_words} —Å–ª–æ–≤, —Ñ–∏–ª—å—Ç—Ä: {keywords or '‚Äî'})"
    )

    try:
        items = await parse_many_async(
            urls, latest_n=latest_n, keywords=keywords, summary_words=summary_words
        )
    except RuntimeError as e:
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å summarizer ‚Äî —á–µ—Å—Ç–Ω–æ —Å–æ–æ–±—â–∞–µ–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç/—Å–ª–æ–º–∞–ª—Å—è
        await state.clear()
        await message.answer(f"‚ö†Ô∏è {e}")
        return
    finally:
        await state.clear()

    if not items:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º.")
        return

    # –ö–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å ‚Äî –û–¢–î–ï–õ–¨–ù–´–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ HTML
    for it in items:
        text = format_three_lines_plain_ru(it)
        if not text:
            continue
        await message.answer(text, disable_web_page_preview=True)

def build_bot_and_dispatcher() -> (Bot, Dispatcher):
    token = os.getenv(BOT_TOKEN_ENV, "").strip()
    if not token:
        raise RuntimeError(
            f"Env var {BOT_TOKEN_ENV} is empty. "
            f"Set TELEGRAM_BOT_TOKEN='<your_bot_token>' –≤ .env –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º."
        )

    storage = MemoryStorage()
    bot = Bot(token=token)
    dp = Dispatcher(storage=storage)

    dp.message.register(on_start, CommandStart())
    dp.message.register(cmd_setn, Command("setn"))
    dp.message.register(cmd_setk, Command("setk"))
    dp.message.register(cmd_setsumw, Command("setsumw"))
    dp.message.register(cmd_cancel, Command("cancel"))
    dp.message.register(cmd_rss, Command("rss"))

    dp.message.register(
        handle_urls,
        StateFilter(RSSForm.waiting_for_urls),
        F.content_type == "text",
    )
    return bot, dp

async def run_bot_forever():
    bot, dp = build_bot_and_dispatcher()
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
