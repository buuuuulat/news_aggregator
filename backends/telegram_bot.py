from __future__ import annotations
import os
import textwrap
import html
import re
from typing import Dict, Any, List, Tuple, Optional
from email.utils import parsedate_to_datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
from pathlib import Path
import sys

import requests
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –Ω–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ bs4 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
try:
    from bs4 import BeautifulSoup  # type: ignore
except Exception:
    BeautifulSoup = None  # type: ignore

# –ø–æ–¥–∫–ª—é—á–∏–º –ø–∞–ø–∫—É summarizer –∫–∞–∫ –≤ –≤–µ–±-–±—ç–∫–µ
SUMM_DIR = Path(__file__).resolve().parents[1] / "summarizer"
if str(SUMM_DIR) not in sys.path:
    sys.path.append(str(SUMM_DIR))
try:
    from model import summarize as ru_summarize, summarize_many as ru_summarize_many  # type: ignore
except Exception:
    ru_summarize = None  # type: ignore[assignment]
    ru_summarize_many = None  # type: ignore[assignment]

from backends.rss_utils import (
    parse_many_async,           # –±–µ—Ä—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É items (title/link/published/summary/...)
    format_three_lines_plain_ru # fallback
)

BOT_TOKEN_ENV = "TELEGRAM_BOT_TOKEN"
USER_PREFS: Dict[int, Dict[str, Any]] = {}

class RSSForm(StatesGroup):
    waiting_for_urls = State()

class SettingsForm(StatesGroup):
    waiting_for_custom_n = State()
    waiting_for_keywords = State()
    waiting_for_custom_sumw = State()

# ---------------- –æ–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã ----------------

def _parse_urls_block(s: str) -> List[str]:
    raw = (s or "").replace("\r", "\n").split("\n")
    urls: List[str] = []
    for line in raw:
        line = line.strip()
        if not line:
            continue
        urls.extend([u.strip() for u in line.split(",") if u.strip()])
    return urls

def _get_user_prefs(uid: int) -> Dict[str, Any]:
    return USER_PREFS.setdefault(
        uid,
        {
            "latest_n": 3,
            "keywords": "",
            "summary_words": 36,
            "preview": True,
            "last_urls": [],
        },
    )

def _fmt_source(url: str) -> str:
    try:
        from urllib.parse import urlparse
        host = urlparse(url or "").netloc or ""
        return host.replace("www.", "") if host else ""
    except Exception:
        return ""

def _truncate_words(s: str, max_words: int) -> str:
    parts = s.split()
    if len(parts) <= max_words:
        return s
    return " ".join(parts[:max_words]).rstrip(",.;:‚Äî- ") + "‚Ä¶"

def _fmt_date_human(s: str) -> str:
    if not s:
        return ""
    try:
        dt = parsedate_to_datetime(s)
        return dt.strftime("%Y-%m-%d %H:%M")
    except Exception:
        return s

def _clean_html(text: str) -> str:
    if not text:
        return ""
    if BeautifulSoup:
        try:
            return BeautifulSoup(text, "html.parser").get_text(" ", strip=True)
        except Exception:
            pass
    # –ª–µ–≥–∫–∏–π —Ñ–æ–ª–±—ç–∫
    return re.sub(r"<[^>]+>", " ", text)

# ----- –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏ (–∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ) -----

def _extract_article_text(url: str, fallback: str = "") -> str:
    if not url:
        return fallback

    # 1) trafilatura
    try:
        import trafilatura  # type: ignore
        downloaded = trafilatura.fetch_url(url)
        if downloaded:
            extracted = trafilatura.extract(downloaded, include_comments=False, include_images=False)
            if extracted:
                return extracted
    except Exception:
        pass

    # 2) requests + BeautifulSoup
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        resp = requests.get(url, timeout=10, headers=headers)
        if resp.ok and resp.text:
            if BeautifulSoup:
                soup = BeautifulSoup(resp.text, "html.parser")
                for tag in soup(["script", "style", "noscript"]):
                    tag.extract()
                container = soup.find("article") or soup
                paragraphs = [p.get_text(" ", strip=True) for p in container.find_all("p")]
                text = "\n".join(p for p in paragraphs if p)
                if text:
                    return text
    except Exception:
        pass

    return fallback

def _summarize_many_texts(texts: List[str], target_words: int) -> List[str]:
    # ¬´–ø—Ä–∏–±–ª–∏–∂–∞–µ–º¬ª —Å–ª–æ–≤–∞ –∫ —Ç–æ–∫–µ–Ω–∞–º: ~2 * words (–∂–µ—Å—Ç–∫–∏–π –≤–µ—Ä—Ö)
    max_new_tokens = max(30, min(200, target_words * 2))

    if ru_summarize_many is not None:
        try:
            outs = ru_summarize_many(
                texts,
                max_new_tokens=max_new_tokens,
                batch_size=len(texts) if texts else 1,
                num_beams=1,
            )
            if isinstance(outs, list) and outs:
                return [(_clean_html(o) if o else "") for o in outs]
        except Exception:
            pass

    results: List[str] = []
    if ru_summarize is not None:
        for t in texts:
            try:
                parts = ru_summarize(t, max_new_tokens=max_new_tokens)
                if isinstance(parts, list):
                    joined = "\n".join(p for p in parts if p).strip()
                else:
                    joined = str(parts or "").strip()
                results.append(_clean_html(joined))
            except Exception:
                results.append("")
    else:
        # –≥–ª—É—Ö–æ–π —Ñ–æ–ª–±—ç–∫: –ø–µ—Ä–≤—ã–µ 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        for t in texts:
            s = re.split(r"(?<=[.!?])\s+", (t or "").strip())
            results.append(" ".join(s[:3]).strip())

    return results

def _ensure_neural_summaries(items: List[Dict[str, Any]], target_words: int) -> List[Dict[str, Any]]:
    """
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–π—Ç–µ–º–∞:
      ‚Äî –µ—Å–ª–∏ summary –ø—É—Å—Ç–æ–π/–º—É—Å–æ—Ä–Ω—ã–π, —Ç—è–Ω–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø—Ä–æ–≥–æ–Ω—è–µ–º —á–µ—Ä–µ–∑ summarize,
      ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥ –≤ item["summary"].
    –î–µ–ª–∞–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏.
    """
    if not items:
        return items

    # –∫–∞–∫–∏–µ –Ω—É–∂–Ω–æ —Å—É–º–º–∞—Ä–∏–∑–æ–≤–∞—Ç—å
    need_idx: List[int] = []
    fallbacks: List[str] = []
    links: List[str] = []

    for i, it in enumerate(items):
        cur = (it.get("summary") or "").strip()
        if cur and len(cur.split()) >= max(10, target_words // 3):
            # —É–∂–µ —á—Ç–æ-—Ç–æ –≤–º–µ–Ω—è–µ–º–æ–µ
            continue
        need_idx.append(i)
        inline = (
            it.get("summary") or it.get("description") or it.get("content")
            or it.get("text") or it.get("inline") or ""
        )
        fallbacks.append(_clean_html(str(inline)))
        links.append(str(it.get("link") or ""))

    if not need_idx:
        return items

    # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    texts: List[str] = [""] * len(need_idx)
    with ThreadPoolExecutor(max_workers=min(12, len(need_idx) or 1)) as ex:
        fut2idx = {}
        for j, idx in enumerate(need_idx):
            fut = ex.submit(_extract_article_text, links[j], fallbacks[j])
            fut2idx[fut] = j
        for fut in as_completed(fut2idx):
            j = fut2idx[fut]
            try:
                texts[j] = fut.result() or fallbacks[j] or ""
            except Exception:
                texts[j] = fallbacks[j] or ""

    # —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –±–∞—Ç—á–µ–º
    summaries = _summarize_many_texts(texts, target_words)

    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω—ã–µ items + –ø–æ–¥—Ä–µ–∑–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
    for j, idx in enumerate(need_idx):
        s = _truncate_words((summaries[j] or "").replace("\n", " "), max_words=target_words).strip()
        items[idx]["summary"] = s if s else (fallbacks[j] or "‚Äî")

    return items

# --------- —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (–∫–∞–∫ —Ç—ã –ø–æ–ø—Ä–æ—Å–∏–ª) ---------

def _format_card_html(item: Dict[str, Any], summary_words: int = 36) -> str:
    # –ü–æ—Ä—è–¥–æ–∫: –ó–∞–≥–æ–ª–æ–≤–æ–∫ / –°–≤–æ–¥–∫–∞ / –î–∞—Ç–∞, <a href="...">–ò—Å—Ç–æ—á–Ω–∏–∫</a>
    title = str(item.get("title") or "(–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)")
    link = str(item.get("link") or "")
    published = str(item.get("published") or "")
    src = str(item.get("src") or "") or _fmt_source(link)

    title_h = html.escape(title)
    summary_raw = (item.get("summary") or "").strip()
    summary_clean = html.escape(_truncate_words(summary_raw.replace("\n", " "), summary_words)) if summary_raw else "‚Äî"

    date_str = _fmt_date_human(published)
    src_label = html.escape(src or "–ò—Å—Ç–æ—á–Ω–∏–∫")
    link_h = html.escape(link)

    footer = ""
    if date_str and link_h:
        footer = f"{html.escape(date_str)}, <a href=\"{link_h}\">{src_label}</a>"
    elif date_str:
        footer = html.escape(date_str)
    elif link_h:
        footer = f"<a href=\"{link_h}\">{src_label}</a>"

    lines = [title_h, summary_clean]
    if footer:
        lines.append(footer)
    return "\n".join(lines).strip()

# ---------- –ú–µ–Ω—é ----------

def _kb_main(uid: int) -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="‚ñ∂Ô∏è –°–æ–±—Ä–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="run_last")
    b.button(text="üì∞ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="rss_prompt")
    b.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    b.button(text="‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="help")
    b.adjust(1, 2, 1)
    return b.as_markup()

def _kb_settings(uid: int) -> InlineKeyboardMarkup:
    prefs = _get_user_prefs(uid)
    n = int(prefs.get("latest_n", 3))
    w = int(prefs.get("summary_words", 36))
    kw = str(prefs.get("keywords", ""))
    preview = bool(prefs.get("preview", True))

    b = InlineKeyboardBuilder()
    b.button(text=f"–ó–∞–ø–∏—Å–µ–π: {n} ‚ûñ", callback_data="setn:dec")
    b.button(text="‚ûï", callback_data="setn:inc")
    b.button(text="‚úèÔ∏è –≤–≤–µ—Å—Ç–∏", callback_data="setn:set")

    b.button(text=f"–°–≤–æ–¥–∫–∞, —Å–ª–æ–≤: {w} ‚ûñ", callback_data="setsumw:dec")
    b.button(text="‚ûï", callback_data="setsumw:inc")
    b.button(text="‚úèÔ∏è –≤–≤–µ—Å—Ç–∏", callback_data="setsumw:set")

    kw_label = kw if kw else "‚Äî"
    b.button(text=f"–ö–ª—é—á–µ–≤—ã–µ: {kw_label}", callback_data="noop")
    b.button(text="‚úèÔ∏è –∏–∑–º–µ–Ω–∏—Ç—å", callback_data="setk:edit")
    if kw:
        b.button(text="üßπ –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="setk:clear")

    b.button(text=f"–ü—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫: {'ON' if preview else 'OFF'}", callback_data="preview:toggle")

    b.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")
    b.adjust(3, 3, 2, 1, 1)
    return b.as_markup()

async def _send_main_menu(message: Message):
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n‚Äî –ó–∞–ø—É—Å–∫–∞–π —Å–±–æ—Ä –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –º–µ–Ω—è–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—ã–µ RSS.",
        reply_markup=_kb_main(message.from_user.id),
    )

async def _edit_to_main_menu(cb: CallbackQuery):
    await cb.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n‚Äî –ó–∞–ø—É—Å–∫–∞–π —Å–±–æ—Ä –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –º–µ–Ω—è–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—ã–µ RSS.",
        reply_markup=_kb_main(cb.from_user.id),
    )

async def _edit_to_settings(cb: CallbackQuery):
    await cb.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n‚Äî –¢—ã–∫–Ω–∏ ‚ûñ/‚ûï –∏–ª–∏ ¬´‚úèÔ∏è –≤–≤–µ—Å—Ç–∏¬ª –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.\n‚Äî –ü—Ä–µ–≤—å—é: –≤–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏-–ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫.",
        reply_markup=_kb_settings(cb.from_user.id),
    )

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------

async def on_start(message: Message):
    await _setup_bot_commands(message.bot)
    await message.answer(
        textwrap.dedent(
            """\
            –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞.
            –§–æ—Ä–º–∞—Ç: –ó–∞–≥–æ–ª–æ–≤–æ–∫ / –°–≤–æ–¥–∫–∞ / –î–∞—Ç–∞, –ò—Å—Ç–æ—á–Ω–∏–∫(—Å—Å—ã–ª–∫–∞).
            """
        ),
        parse_mode="HTML",
    )
    await _send_main_menu(message)

async def cmd_menu(message: Message):
    await _send_main_menu(message)

async def cmd_settings(message: Message):
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=_kb_settings(message.from_user.id))

async def cmd_help(message: Message):
    await message.answer(
        textwrap.dedent(
            """\
            –°–ø—Ä–∞–≤–∫–∞:
            ‚Ä¢ /menu ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            ‚Ä¢ /rss ‚Äî –≤–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ RSS-—Å—Å—ã–ª–æ–∫
            ‚Ä¢ /settings ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            ‚Ä¢ /setn N ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π (1..300)
            ‚Ä¢ /setsumw W ‚Äî —Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä —Å–≤–æ–¥–∫–∏ (15..80 —Å–ª–æ–≤)
            ‚Ä¢ /setk —Å–ª–æ–≤–∞ ‚Äî –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            ‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥
            """
        )
    )

async def _setup_bot_commands(bot: Bot):
    await bot.set_my_commands(
        [
            BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="rss", description="–í–≤–µ—Å—Ç–∏ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏"),
            BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞"),
            BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥"),
        ]
    )

# ---------- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ ¬´—Å—Ç–∞—Ä—ã–º–∏¬ª –∫–æ–º–∞–Ω–¥–∞–º–∏ ----------

async def cmd_setn(message: Message):
    try:
        n = int(message.text.split(maxsplit=1)[1])
        if n < 1 or n > 300:
            raise ValueError
    except Exception:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ 1..300, –Ω–∞–ø—Ä–∏–º–µ—Ä: /setn 3")
        return
    _get_user_prefs(message.from_user.id)["latest_n"] = n
    await message.answer(f"‚úÖ –ë—É–¥—É –±—Ä–∞—Ç—å –ø–æ {n} –∑–∞–ø–∏—Å–µ–π —Å –∫–∞–∂–¥–æ–≥–æ RSS.")

async def cmd_setk(message: Message):
    try:
        kw = message.text.split(maxsplit=1)[1].strip()
    except Exception:
        kw = ""
    _get_user_prefs(message.from_user.id)["keywords"] = kw
    await message.answer(f"‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {kw or '–æ—Ç–∫–ª—é—á—ë–Ω'}.")

async def cmd_setsumw(message: Message):
    try:
        w = int(message.text.split(maxsplit=1)[1])
        if w < 15 or w > 80:
            raise ValueError
    except Exception:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ 15..80 —Å–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: /setsumw 36")
        return
    _get_user_prefs(message.from_user.id)["summary_words"] = w
    await message.answer(f"‚úÖ –†–∞–∑–º–µ—Ä —Å–≤–æ–¥–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {w} —Å–ª–æ–≤.")

async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùé –û—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (/rss –∏–ª–∏ /menu).")

# ---------- RSS –≤–≤–æ–¥/–∑–∞–ø—É—Å–∫ ----------

async def cmd_rss(message: Message, state: FSMContext):
    await state.set_state(RSSForm.waiting_for_urls)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ RSS-—Å—Å—ã–ª–æ–∫ (–∫–∞–∂–¥—É—é –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é). –ö–æ–º–∞–Ω–¥–∞ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å."
    )

async def handle_urls(message: Message, state: FSMContext):
    urls = _parse_urls_block(message.text or "")
    if not urls:
        await message.answer("–°—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ /cancel.")
        return

    uid = message.from_user.id
    prefs = _get_user_prefs(uid)
    prefs["last_urls"] = urls

    latest_n = int(prefs.get("latest_n", 3))
    keywords = str(prefs.get("keywords", ""))
    summary_words = int(prefs.get("summary_words", 36))
    preview = bool(prefs.get("preview", True))

    await message.answer(
        f"üîé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(urls)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤‚Ä¶ (–ø–æ {latest_n} –∑–∞–ø–∏—Å–µ–π, —Å–≤–æ–¥–∫–∞ ‚âà {summary_words} —Å–ª–æ–≤, —Ñ–∏–ª—å—Ç—Ä: {keywords or '‚Äî'})"
    )

    try:
        items = await parse_many_async(
            urls, latest_n=latest_n, keywords=keywords, summary_words=summary_words
        )
    except RuntimeError as e:
        await state.clear()
        await message.answer(f"‚ö†Ô∏è {e}")
        return
    finally:
        await state.clear()

    # –∫—Ä–∏—Ç–∏—á–Ω–æ: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–æ–Ω —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å –ø–æ –ü–û–õ–ù–û–ú–£ —Ç–µ–∫—Å—Ç—É
    items = _ensure_neural_summaries(items, target_words=summary_words)

    if not items:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º.")
        return

    for it in items:
        text_html = _format_card_html(it, summary_words=summary_words)
        if not text_html:
            fallback = format_three_lines_plain_ru(it)
            if fallback:
                await message.answer(fallback, disable_web_page_preview=(not preview))
            continue
        await message.answer(
            text_html,
            parse_mode="HTML",
            disable_web_page_preview=(not preview),
        )

# ---------- Callback-–∏ –º–µ–Ω—é ----------

async def cb_menu(cb: CallbackQuery):
    await cb.answer()
    await _edit_to_main_menu(cb)

async def cb_help(cb: CallbackQuery):
    await cb.answer()
    await cb.message.edit_text(
        textwrap.dedent(
            """\
            ‚ùì –°–ø—Ä–∞–≤–∫–∞:
            ‚Ä¢ ¬´–°–æ–±—Ä–∞—Ç—å —Å–µ–π—á–∞—Å¬ª ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º.
            ‚Ä¢ ¬´RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏¬ª ‚Äî –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫.
            ‚Ä¢ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª ‚Äî —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π, –¥–ª–∏–Ω–∞ —Å–≤–æ–¥–∫–∏, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –ø—Ä–µ–≤—å—é.
            –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã /menu, /rss, /settings, /help.
            """
        ),
        reply_markup=_kb_main(cb.from_user.id),
    )

async def cb_rss_prompt(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ RSS-—Å—Å—ã–ª–æ–∫ (–∫–∞–∂–¥—É—é –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).")
    await state.set_state(RSSForm.waiting_for_urls)

async def cb_run_last(cb: CallbackQuery):
    await cb.answer()
    uid = cb.from_user.id
    prefs = _get_user_prefs(uid)
    last_urls = prefs.get("last_urls") or []
    if not last_urls:
        await cb.message.edit_text(
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ ¬´üì∞ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏¬ª.",
            reply_markup=_kb_main(uid),
        )
        return

    latest_n = int(prefs.get("latest_n", 3))
    keywords = str(prefs.get("keywords", ""))
    summary_words = int(prefs.get("summary_words", 36))
    preview = bool(prefs.get("preview", True))

    await cb.message.edit_text(
        f"üîé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(last_urls)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤‚Ä¶ (–ø–æ {latest_n} –∑–∞–ø–∏—Å–µ–π, —Å–≤–æ–¥–∫–∞ ‚âà {summary_words} —Å–ª–æ–≤, —Ñ–∏–ª—å—Ç—Ä: {keywords or '‚Äî'})"
    )

    try:
        items = await parse_many_async(
            last_urls, latest_n=latest_n, keywords=keywords, summary_words=summary_words
        )
    except RuntimeError as e:
        await cb.message.answer(f"‚ö†Ô∏è {e}")
        await _edit_to_main_menu(cb)
        return

    items = _ensure_neural_summaries(items, target_words=summary_words)

    if not items:
        await cb.message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º.")
        await _edit_to_main_menu(cb)
        return

    for it in items:
        text_html = _format_card_html(it, summary_words=summary_words)
        if not text_html:
            fallback = format_three_lines_plain_ru(it)
            if fallback:
                await cb.message.answer(fallback, disable_web_page_preview=(not preview))
            continue
        await cb.message.answer(
            text_html,
            parse_mode="HTML",
            disable_web_page_preview=(not preview),
        )
    await _edit_to_main_menu(cb)

async def cb_settings(cb: CallbackQuery):
    await cb.answer()
    await _edit_to_settings(cb)

async def cb_noop(cb: CallbackQuery):
    await cb.answer()

async def cb_toggle_preview(cb: CallbackQuery):
    await cb.answer()
    prefs = _get_user_prefs(cb.from_user.id)
    prefs["preview"] = not bool(prefs.get("preview", True))
    await _edit_to_settings(cb)

# setn
async def cb_setn_inc(cb: CallbackQuery):
    await cb.answer()
    prefs = _get_user_prefs(cb.from_user.id)
    prefs["latest_n"] = min(300, int(prefs.get("latest_n", 3)) + 1)
    await _edit_to_settings(cb)

async def cb_setn_dec(cb: CallbackQuery):
    await cb.answer()
    prefs = _get_user_prefs(cb.from_user.id)
    prefs["latest_n"] = max(1, int(prefs.get("latest_n", 3)) - 1)
    await _edit_to_settings(cb)

async def cb_setn_set(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.edit_text("–í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π (1..300):")
    await state.set_state(SettingsForm.waiting_for_custom_n)

# setsumw
async def cb_setsumw_inc(cb: CallbackQuery):
    await cb.answer()
    prefs = _get_user_prefs(cb.from_user.id)
    prefs["summary_words"] = min(80, int(prefs.get("summary_words", 36)) + 1)
    await _edit_to_settings(cb)

async def cb_setsumw_dec(cb: CallbackQuery):
    await cb.answer()
    prefs = _get_user_prefs(cb.from_user.id)
    prefs["summary_words"] = max(15, int(prefs.get("summary_words", 36)) - 1)
    await _edit_to_settings(cb)

async def cb_setsumw_set(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.edit_text("–í–≤–µ–¥–∏ —Ü–µ–ª–µ–≤—É—é –¥–ª–∏–Ω—É —Å–≤–æ–¥–∫–∏ –≤ —Å–ª–æ–≤–∞—Ö (15..80):")
    await state.set_state(SettingsForm.waiting_for_custom_sumw)

# setk
async def cb_setk_edit(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.edit_text("–í–≤–µ–¥–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ø—É—Å—Ç–æ ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å):")
    await state.set_state(SettingsForm.waiting_for_keywords)

async def cb_setk_clear(cb: CallbackQuery):
    await cb.answer()
    prefs = _get_user_prefs(cb.from_user.id)
    prefs["keywords"] = ""
    await _edit_to_settings(cb)

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ ----------

async def handle_custom_n(message: Message, state: FSMContext):
    try:
        n = int(message.text.strip())
        if not (1 <= n <= 300):
            raise ValueError
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –£–∫–∞–∂–∏ —Ü–µ–ª–æ–µ 1..300.")
        return
    _get_user_prefs(message.from_user.id)["latest_n"] = n
    await state.clear()
    await message.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=_kb_settings(message.from_user.id))

async def handle_custom_sumw(message: Message, state: FSMContext):
    try:
        w = int(message.text.strip())
        if not (15 <= w <= 80):
            raise ValueError
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í–≤–µ–¥–∏ 15..80.")
        return
    _get_user_prefs(message.from_user.id)["summary_words"] = w
    await state.clear()
    await message.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=_kb_settings(message.from_user.id))

async def handle_keywords(message: Message, state: FSMContext):
    _get_user_prefs(message.from_user.id)["keywords"] = message.text.strip()
    await state.clear()
    await message.answer("‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=_kb_settings(message.from_user.id))

# ---------- –°–±–æ—Ä–∫–∞ –±–æ—Ç–∞ ----------

def build_bot_and_dispatcher() -> Tuple[Bot, Dispatcher]:
    token = os.getenv(BOT_TOKEN_ENV, "").strip()
    if not token:
        raise RuntimeError(
            f"Env var {BOT_TOKEN_ENV} is empty. "
            f"Set TELEGRAM_BOT_TOKEN='<your_bot_token>' –≤ .env –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º."
        )

    storage = MemoryStorage()
    bot = Bot(token=token)
    dp = Dispatcher(storage=storage)

    dp.message.register(on_start, CommandStart())
    dp.message.register(cmd_menu, Command("menu"))
    dp.message.register(cmd_settings, Command("settings"))
    dp.message.register(cmd_help, Command("help"))

    dp.message.register(cmd_setn, Command("setn"))
    dp.message.register(cmd_setk, Command("setk"))
    dp.message.register(cmd_setsumw, Command("setsumw"))
    dp.message.register(cmd_cancel, Command("cancel"))

    dp.message.register(cmd_rss, Command("rss"))
    dp.message.register(handle_urls, StateFilter(RSSForm.waiting_for_urls), F.content_type == "text")

    dp.message.register(handle_custom_n, StateFilter(SettingsForm.waiting_for_custom_n), F.content_type == "text")
    dp.message.register(
        handle_custom_sumw, StateFilter(SettingsForm.waiting_for_custom_sumw), F.content_type == "text"
    )
    dp.message.register(handle_keywords, StateFilter(SettingsForm.waiting_for_keywords), F.content_type == "text")

    dp.callback_query.register(cb_menu, F.data == "menu")
    dp.callback_query.register(cb_help, F.data == "help")
    dp.callback_query.register(cb_rss_prompt, F.data == "rss_prompt")
    dp.callback_query.register(cb_run_last, F.data == "run_last")
    dp.callback_query.register(cb_settings, F.data == "settings")
    dp.callback_query.register(cb_noop, F.data == "noop")
    dp.callback_query.register(cb_toggle_preview, F.data == "preview:toggle")

    dp.callback_query.register(cb_setn_inc, F.data == "setn:inc")
    dp.callback_query.register(cb_setn_dec, F.data == "setn:dec")
    dp.callback_query.register(cb_setn_set, F.data == "setn:set")

    dp.callback_query.register(cb_setsumw_inc, F.data == "setsumw:inc")
    dp.callback_query.register(cb_setsumw_dec, F.data == "setsumw:dec")
    dp.callback_query.register(cb_setsumw_set, F.data == "setsumw:set")

    dp.callback_query.register(cb_setk_edit, F.data == "setk:edit")
    dp.callback_query.register(cb_setk_clear, F.data == "setk:clear")

    return bot, dp

async def run_bot_forever():
    bot, dp = build_bot_and_dispatcher()
    await _setup_bot_commands(bot)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
